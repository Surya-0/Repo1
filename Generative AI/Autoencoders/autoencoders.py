# -*- coding: utf-8 -*-
"""Autoencoders.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BIasHoSxPZ0tq2zLOS75qwG-Ye6xYun0

## Importing libraries
"""

import numpy as np
import pandas as pd
from keras import datasets
from keras.models import Sequential,Model
from keras.layers import Dense,Conv2D,MaxPool2D,Input,Flatten,Reshape,Conv2DTranspose,UpSampling2D
import matplotlib.pyplot as plt

"""## Working with the dataset"""

(X_train,y_train),(X_test,y_test) = datasets.fashion_mnist.load_data()

X_train.shape

X_test.shape

y_train

X_train = X_train/255
X_test = X_test/255

for i in range(10):
  plt.figure(figsize = (2,2))
  plt.imshow(X_test[i])
  plt.show()

X_train = np.reshape(X_train,(-1,28,28,1))

X_train.shape

X_test = np.reshape(X_test,(-1,28,28,1))

X_test.shape

encoder = Sequential()

encoder.add(Input(shape = (28,28,1)))

encoder.add(Conv2D(filters = 32,kernel_size = (3,3),activation = 'relu'))
encoder.add(Conv2D(filters = 32,kernel_size = (3,3),activation = 'relu'))

encoder.add(MaxPool2D(pool_size = (2,2)))

encoder.add(Conv2D(filters = 32,kernel_size = (3,3),activation = 'relu',padding='same'))
encoder.add(MaxPool2D(pool_size = (2,2)))

encoder.add(Conv2D(filters = 32,kernel_size = (3,3),activation = 'relu'))

encoder.add(Conv2D(filters = 128,kernel_size = (3,3),padding = 'same',activation = 'relu'))

encoder.add(Flatten())

encoder.add(Dense(units = 128,activation = 'relu'))

encoder.add(Dense(units = 2))

encoder.summary()

decoder = Sequential()

decoder.add(Input(shape = (2,)))

decoder.add(Dense(units = 128,activation = 'relu'))

decoder.add(Dense(units = 2048,activation = 'relu'))

decoder.add(Reshape((4,4,128)))

decoder.add(Conv2DTranspose(filters = 32,kernel_size = (3,3),padding = 'same',activation = 'relu'))

decoder.add(Conv2DTranspose(filters = 32,kernel_size = (3,3),activation = 'relu'))

decoder.add(UpSampling2D(size = (2,2)))

decoder.add(Conv2DTranspose(filters = 32,kernel_size = (3,3),activation = 'relu',padding = 'same'))

decoder.add(UpSampling2D(size = (2,2)))

decoder.add(Conv2DTranspose(filters = 32,kernel_size = (3,3),activation = 'relu'))
decoder.add(Conv2DTranspose(filters = 32,kernel_size = (3,3),activation = 'relu'))

decoder.add(Conv2D(filters = 1,kernel_size = (3,3),padding = 'same',activation = 'relu'))

decoder.summary()

input_ae = encoder.inputs
output_e = encoder.outputs
output_de = decoder(output_e)
output_de

autoencoder = Model(inputs = input_ae,outputs = output_de)

autoencoder.summary()

autoencoder.compile(optimizer = 'adam',loss = 'binary_crossentropy',metrics = ['accuracy'])

autoencoder.fit(X_train,X_train,epochs = 10,batch_size = 32,validation_data = (X_test,X_test))

pred = autoencoder.predict(X_test[:100])

pred.shape

for i in range(10):
  plt.figure(figsize = (2,2))
  plt.imshow(X_test[i])
  plt.show()

for i in range(10):
  plt.figure(figsize = (2,2))
  plt.imshow(pred[i])
  plt.show()

embeddings = encoder.predict(X_test[:1000])
embeddings

embeddings.shape

labels = y_test[:1000]
plt.scatter(embeddings[:,0],embeddings[:,1],c = labels,cmap = 'rainbow',alpha = 0.8,s = 5)
plt.colorbar()
plt.show()

mins,maxs = np.min(embeddings,axis=0),np.max(embeddings,axis = 0)

mins

maxs

# Get the range of the existing embeddings
mins, maxs = np.min(embeddings, axis=0), np.max(embeddings, axis=0)
EMBEDDING_DIM = 2
# Sample some points in the latent space
grid_width, grid_height = (6, 3)
sample = np.random.normal(mins, maxs, size=(grid_width * grid_height, EMBEDDING_DIM))

sample

sample.shape

reconstruction = decoder.predict(sample)

for i in range(10):
  plt.figure(figsize = (1,1))
  plt.imshow(reconstruction[i])
  plt.show()

labels = y_test[:1000]
plt.scatter(embeddings[:,0],embeddings[:,1],c = labels,cmap = 'rainbow',alpha = 0.8,s = 5)
plt.colorbar()
plt.scatter(sample[:,0],sample[:,1])
plt.show()

test_point = np.array([(2*mins+3*maxs)/2])
test_point

pred = decoder.predict(test_point)
pred.shape

plt.figure(figsize = (2,2))
plt.imshow(pred[0])

